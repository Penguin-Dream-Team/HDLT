/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.database;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import sec.hdlt.server.db.database.tables.BroadcastNonces;
import sec.hdlt.server.db.database.tables.HaNonces;
import sec.hdlt.server.db.database.tables.Nonces;
import sec.hdlt.server.db.database.tables.Proofs;
import sec.hdlt.server.db.database.tables.Reports;
import sec.hdlt.server.db.database.tables.UserRequests;
import sec.hdlt.server.db.database.tables.records.BroadcastNoncesRecord;
import sec.hdlt.server.db.database.tables.records.HaNoncesRecord;
import sec.hdlt.server.db.database.tables.records.NoncesRecord;
import sec.hdlt.server.db.database.tables.records.ProofsRecord;
import sec.hdlt.server.db.database.tables.records.ReportsRecord;
import sec.hdlt.server.db.database.tables.records.UserRequestsRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BroadcastNoncesRecord> PK_BROADCAST_NONCES = Internal.createUniqueKey(BroadcastNonces.BROADCAST_NONCES, DSL.name("pk_broadcast_nonces"), new TableField[] { BroadcastNonces.BROADCAST_NONCES.SERVER_ID, BroadcastNonces.BROADCAST_NONCES.NONCE }, true);
    public static final UniqueKey<HaNoncesRecord> PK_HA_NONCES = Internal.createUniqueKey(HaNonces.HA_NONCES, DSL.name("pk_ha_nonces"), new TableField[] { HaNonces.HA_NONCES.NONCE }, true);
    public static final UniqueKey<NoncesRecord> PK_NONCES = Internal.createUniqueKey(Nonces.NONCES, DSL.name("pk_nonces"), new TableField[] { Nonces.NONCES.USER_ID, Nonces.NONCES.NONCE }, true);
    public static final UniqueKey<ProofsRecord> PK_PROOFS = Internal.createUniqueKey(Proofs.PROOFS, DSL.name("pk_proofs"), new TableField[] { Proofs.PROOFS.ID }, true);
    public static final UniqueKey<ReportsRecord> PK_REPORTS = Internal.createUniqueKey(Reports.REPORTS, DSL.name("pk_reports"), new TableField[] { Reports.REPORTS.ID }, true);
    public static final UniqueKey<UserRequestsRecord> PK_USER_REQUESTS = Internal.createUniqueKey(UserRequests.USER_REQUESTS, DSL.name("pk_user_requests"), new TableField[] { UserRequests.USER_REQUESTS.USER_ID, UserRequests.USER_REQUESTS.TIMESTAMP }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ProofsRecord, ReportsRecord> FK_PROOFS_REPORTS_1 = Internal.createForeignKey(Proofs.PROOFS, DSL.name("fk_proofs_reports_1"), new TableField[] { Proofs.PROOFS.REPORT_ID }, Keys.PK_REPORTS, new TableField[] { Reports.REPORTS.ID }, true);
}
