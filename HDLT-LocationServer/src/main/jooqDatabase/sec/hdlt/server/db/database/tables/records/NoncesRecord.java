/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.database.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;

import sec.hdlt.server.db.database.tables.Nonces;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoncesRecord extends UpdatableRecordImpl<NoncesRecord> implements Record2<UInteger, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>nonces.user_id</code>.
     */
    public NoncesRecord setUserId(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>nonces.user_id</code>.
     */
    public UInteger getUserId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>nonces.nonce</code>.
     */
    public NoncesRecord setNonce(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>nonces.nonce</code>.
     */
    public byte[] getNonce() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UInteger, byte[]> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UInteger, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Nonces.NONCES.USER_ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Nonces.NONCES.NONCE;
    }

    @Override
    public UInteger component1() {
        return getUserId();
    }

    @Override
    public byte[] component2() {
        return getNonce();
    }

    @Override
    public UInteger value1() {
        return getUserId();
    }

    @Override
    public byte[] value2() {
        return getNonce();
    }

    @Override
    public NoncesRecord value1(UInteger value) {
        setUserId(value);
        return this;
    }

    @Override
    public NoncesRecord value2(byte[] value) {
        setNonce(value);
        return this;
    }

    @Override
    public NoncesRecord values(UInteger value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NoncesRecord
     */
    public NoncesRecord() {
        super(Nonces.NONCES);
    }

    /**
     * Create a detached, initialised NoncesRecord
     */
    public NoncesRecord(UInteger userId, byte[] nonce) {
        super(Nonces.NONCES);

        setUserId(userId);
        setNonce(nonce);
    }
}
