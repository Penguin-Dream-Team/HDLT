/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sec.hdlt.server.db.DefaultSchema;
import sec.hdlt.server.db.Keys;
import sec.hdlt.server.db.tables.records.ReportsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reports extends TableImpl<ReportsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>reports</code>
     */
    public static final Reports REPORTS = new Reports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportsRecord> getRecordType() {
        return ReportsRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<ReportsRecord, Object> ID = createField(DSL.name("id"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"SERIAL\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<ReportsRecord, Object> EPOCH = createField(DSL.name("epoch"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"INT UNSIGNED\"").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<ReportsRecord, Object> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"INT UNSIGNED\"").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<ReportsRecord, Object> X = createField(DSL.name("x"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"INT UNSIGNED\"").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<ReportsRecord, Object> Y = createField(DSL.name("y"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"INT UNSIGNED\"").nullable(false), this, "");

    private Reports(Name alias, Table<ReportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reports(Name alias, Table<ReportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reports</code> table reference
     */
    public Reports(String alias) {
        this(DSL.name(alias), REPORTS);
    }

    /**
     * Create an aliased <code>reports</code> table reference
     */
    public Reports(Name alias) {
        this(alias, REPORTS);
    }

    /**
     * Create a <code>reports</code> table reference
     */
    public Reports() {
        this(DSL.name("reports"), null);
    }

    public <O extends Record> Reports(Table<O> child, ForeignKey<O, ReportsRecord> key) {
        super(child, key, REPORTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ReportsRecord> getPrimaryKey() {
        return Keys.PK_REPORTS;
    }

    @Override
    public List<UniqueKey<ReportsRecord>> getKeys() {
        return Arrays.<UniqueKey<ReportsRecord>>asList(Keys.PK_REPORTS);
    }

    @Override
    public Reports as(String alias) {
        return new Reports(DSL.name(alias), this);
    }

    @Override
    public Reports as(Name alias) {
        return new Reports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reports rename(String name) {
        return new Reports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reports rename(Name name) {
        return new Reports(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Object, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
