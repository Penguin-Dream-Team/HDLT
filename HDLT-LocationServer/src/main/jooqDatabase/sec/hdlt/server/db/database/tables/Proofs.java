/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.database.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import sec.hdlt.server.db.database.DefaultSchema;
import sec.hdlt.server.db.database.Keys;
import sec.hdlt.server.db.database.tables.records.ProofsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proofs extends TableImpl<ProofsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>proofs</code>
     */
    public static final Proofs PROOFS = new Proofs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProofsRecord> getRecordType() {
        return ProofsRecord.class;
    }

    /**
     * The column <code>proofs.id</code>.
     */
    public final TableField<ProofsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>proofs.other_user_id</code>.
     */
    public final TableField<ProofsRecord, UInteger> OTHER_USER_ID = createField(DSL.name("other_user_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>proofs.report_id</code>.
     */
    public final TableField<ProofsRecord, UInteger> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>proofs.signature</code>.
     */
    public final TableField<ProofsRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private Proofs(Name alias, Table<ProofsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proofs(Name alias, Table<ProofsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>proofs</code> table reference
     */
    public Proofs(String alias) {
        this(DSL.name(alias), PROOFS);
    }

    /**
     * Create an aliased <code>proofs</code> table reference
     */
    public Proofs(Name alias) {
        this(alias, PROOFS);
    }

    /**
     * Create a <code>proofs</code> table reference
     */
    public Proofs() {
        this(DSL.name("proofs"), null);
    }

    public <O extends Record> Proofs(Table<O> child, ForeignKey<O, ProofsRecord> key) {
        super(child, key, PROOFS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProofsRecord, Integer> getIdentity() {
        return (Identity<ProofsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProofsRecord> getPrimaryKey() {
        return Keys.PK_PROOFS;
    }

    @Override
    public List<UniqueKey<ProofsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProofsRecord>>asList(Keys.PK_PROOFS);
    }

    @Override
    public List<ForeignKey<ProofsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProofsRecord, ?>>asList(Keys.FK_PROOFS_REPORTS_1);
    }

    private transient Reports _reports;

    public Reports reports() {
        if (_reports == null)
            _reports = new Reports(this, Keys.FK_PROOFS_REPORTS_1);

        return _reports;
    }

    @Override
    public Proofs as(String alias) {
        return new Proofs(DSL.name(alias), this);
    }

    @Override
    public Proofs as(Name alias) {
        return new Proofs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proofs rename(String name) {
        return new Proofs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proofs rename(Name name) {
        return new Proofs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, UInteger, UInteger, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
