/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.database.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import sec.hdlt.server.db.database.DefaultSchema;
import sec.hdlt.server.db.database.Keys;
import sec.hdlt.server.db.database.tables.records.BroadcastNoncesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BroadcastNonces extends TableImpl<BroadcastNoncesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>broadcast_nonces</code>
     */
    public static final BroadcastNonces BROADCAST_NONCES = new BroadcastNonces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BroadcastNoncesRecord> getRecordType() {
        return BroadcastNoncesRecord.class;
    }

    /**
     * The column <code>broadcast_nonces.server_id</code>.
     */
    public final TableField<BroadcastNoncesRecord, UInteger> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>broadcast_nonces.nonce</code>.
     */
    public final TableField<BroadcastNoncesRecord, byte[]> NONCE = createField(DSL.name("nonce"), SQLDataType.VARBINARY.nullable(false), this, "");

    private BroadcastNonces(Name alias, Table<BroadcastNoncesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BroadcastNonces(Name alias, Table<BroadcastNoncesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>broadcast_nonces</code> table reference
     */
    public BroadcastNonces(String alias) {
        this(DSL.name(alias), BROADCAST_NONCES);
    }

    /**
     * Create an aliased <code>broadcast_nonces</code> table reference
     */
    public BroadcastNonces(Name alias) {
        this(alias, BROADCAST_NONCES);
    }

    /**
     * Create a <code>broadcast_nonces</code> table reference
     */
    public BroadcastNonces() {
        this(DSL.name("broadcast_nonces"), null);
    }

    public <O extends Record> BroadcastNonces(Table<O> child, ForeignKey<O, BroadcastNoncesRecord> key) {
        super(child, key, BROADCAST_NONCES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BroadcastNoncesRecord> getPrimaryKey() {
        return Keys.PK_BROADCAST_NONCES;
    }

    @Override
    public List<UniqueKey<BroadcastNoncesRecord>> getKeys() {
        return Arrays.<UniqueKey<BroadcastNoncesRecord>>asList(Keys.PK_BROADCAST_NONCES);
    }

    @Override
    public BroadcastNonces as(String alias) {
        return new BroadcastNonces(DSL.name(alias), this);
    }

    @Override
    public BroadcastNonces as(Name alias) {
        return new BroadcastNonces(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BroadcastNonces rename(String name) {
        return new BroadcastNonces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BroadcastNonces rename(Name name) {
        return new BroadcastNonces(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
