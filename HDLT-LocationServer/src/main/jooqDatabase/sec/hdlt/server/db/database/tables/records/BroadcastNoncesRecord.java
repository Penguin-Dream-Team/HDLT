/*
 * This file is generated by jOOQ.
 */
package sec.hdlt.server.db.database.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;

import sec.hdlt.server.db.database.tables.BroadcastNonces;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BroadcastNoncesRecord extends UpdatableRecordImpl<BroadcastNoncesRecord> implements Record2<UInteger, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>broadcast_nonces.server_id</code>.
     */
    public BroadcastNoncesRecord setServerId(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>broadcast_nonces.server_id</code>.
     */
    public UInteger getServerId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>broadcast_nonces.nonce</code>.
     */
    public BroadcastNoncesRecord setNonce(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>broadcast_nonces.nonce</code>.
     */
    public byte[] getNonce() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UInteger, byte[]> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UInteger, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return BroadcastNonces.BROADCAST_NONCES.SERVER_ID;
    }

    @Override
    public Field<byte[]> field2() {
        return BroadcastNonces.BROADCAST_NONCES.NONCE;
    }

    @Override
    public UInteger component1() {
        return getServerId();
    }

    @Override
    public byte[] component2() {
        return getNonce();
    }

    @Override
    public UInteger value1() {
        return getServerId();
    }

    @Override
    public byte[] value2() {
        return getNonce();
    }

    @Override
    public BroadcastNoncesRecord value1(UInteger value) {
        setServerId(value);
        return this;
    }

    @Override
    public BroadcastNoncesRecord value2(byte[] value) {
        setNonce(value);
        return this;
    }

    @Override
    public BroadcastNoncesRecord values(UInteger value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BroadcastNoncesRecord
     */
    public BroadcastNoncesRecord() {
        super(BroadcastNonces.BROADCAST_NONCES);
    }

    /**
     * Create a detached, initialised BroadcastNoncesRecord
     */
    public BroadcastNoncesRecord(UInteger serverId, byte[] nonce) {
        super(BroadcastNonces.BROADCAST_NONCES);

        setServerId(serverId);
        setNonce(nonce);
    }
}
