plugins {
    id("org.flywaydb.flyway") version "7.6.0"
    id("nu.studer.jooq") version "5.2.1"
}

group 'sec.hdlt.server'

application.mainClass = "sec.hdlt.server.MainKt"

dependencies {
    implementation project(":protos")
    implementation "org.jooq:jooq:3.14.8"
    implementation "com.zaxxer:HikariCP:4.0.3"

    implementation "org.xerial:sqlite-jdbc:3.34.0"
    jooqGenerator "org.xerial:sqlite-jdbc:3.34.0"
}

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs += "src/main/jooqDatabase"
}

flyway {
    driver = "org.sqlite.JDBC"
    url = "jdbc:sqlite:${project.projectDir}/src/main/resources/db/template.database.sqlite"
    baselineOnMigrate = true
    locations = ["filesystem:src/main/resources/db/migrations"]
}

jooq {
    version = "3.14.8"
    configurations {
        database {
            generationTool {
                jdbc {
                    driver = "org.sqlite.JDBC"
                    url = "jdbc:sqlite:src/main/resources/db/template.database.sqlite"
                }
                generator {
                    name = "org.jooq.codegen.JavaGenerator"
                    database {
                        name = "org.jooq.meta.sqlite.SQLiteDatabase"
                        excludes = "flyway_schema_history | sqlite_master"
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = "sec.hdlt.server.db.database"
                        directory = "src/main/jooqDatabase"
                    }
                }
            }
        }
    }
}

def migrateTask = task("migrateDb") {
    dependsOn(tasks.named("flywayMigrate"))
    dependsOn(tasks.named("generateDatabaseJooq"))
}

def cleanTask = task("cleanDb") {
    dependsOn(tasks.named("flywayClean"))
}

def deleteServerDatabasesTask = task("deleteServerDbs") {
    doLast {
        delete fileTree("src/main/resources/db").matching {
            include "database*.sqlite"
        }
    }
}

def resetTask = task("resetDb") {
    dependsOn(tasks.named("cleanDb"))
    dependsOn(tasks.named("deleteServerDbs"))
    dependsOn(tasks.named("migrateDb"))
}

def groupName = "Database"
migrateTask.group = groupName
cleanTask.group = groupName
resetTask.group = groupName
deleteServerDatabasesTask.group = groupName
